/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package hiloschat;
import filtro.Datos;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.text.SimpleDateFormat;
import java.util.Calendar;
/**
 *
 * @author hecto
 */
public class ChatUsers extends javax.swing.JFrame {

    private ObjectOutputStream output;  // Stream para enviar mensajes
    private Socket cliente;  // Socket para la conexión al servidor

    /**
     * Creates new form ChatUsers
     */
public ChatUsers() {
    initComponents();
    conectarAlServidor();  // Conectamos al servidor cuando se inicia la interfaz
    
    // Añadir el ActionListener del botón aquí
    btnEnviar.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            enviarMensaje();  // Llama al método que envía el mensaje
        }
    });
}


    /**
     * Método para conectar al servidor
     */
    private void conectarAlServidor() {
        String host = "localhost";
        int puerto = 1024;

        try {
            // Conectamos al servidor
            cliente = new Socket(host, puerto);
            output = new ObjectOutputStream(cliente.getOutputStream());
            txtChatview.append("Conectado al servidor...\n");
        } catch (Exception e) {
            txtChatview.append("Error al conectar con el servidor: " + e.getMessage() + "\n");
        }
    }

    /**
     * Método para enviar un mensaje
     */
    private void enviarMensaje() {
        try {
            // Obtener el mensaje desde el campo de texto
            String mensajeTexto = txtWritemsg.getText();

            if (!mensajeTexto.isEmpty()) {
                // Crear el objeto Datos con el mensaje
                Datos mensaje = new Datos();
                mensaje.setEmisor("Héctor");  // El nombre del emisor (puedes cambiarlo por el que prefieras)
                mensaje.setMensaje(mensajeTexto);  // El mensaje que se ha escrito
                mensaje.setFecha(new SimpleDateFormat("dd/MM/yyyy HH:mm:ss").format(Calendar.getInstance().getTime()));  // Fecha actual

                // Enviar el mensaje al servidor
                output.writeObject(mensaje);

                // Mostrar el mensaje en el área de chat
                txtChatview.append("Tú: " + mensajeTexto + "\n");

                // Limpiar el campo de texto después de enviar el mensaje
                txtWritemsg.setText("");
            }

        } catch (Exception e) {
            txtChatview.append("Error al enviar el mensaje: " + e.getMessage() + "\n");
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtChatview = new javax.swing.JTextArea();
        txtWritemsg = new javax.swing.JTextField();
        btnEnviar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtChatview.setColumns(20);
        txtChatview.setRows(5);
        jScrollPane1.setViewportView(txtChatview);

        btnEnviar.setText("Send");

        jLabel1.setText("All Messages");

        jLabel2.setText("Write Message");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnEnviar)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel1)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addComponent(txtWritemsg, javax.swing.GroupLayout.Alignment.TRAILING)))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtWritemsg, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnEnviar)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChatUsers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChatUsers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChatUsers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChatUsers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChatUsers().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEnviar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtChatview;
    private javax.swing.JTextField txtWritemsg;
    // End of variables declaration//GEN-END:variables
}



